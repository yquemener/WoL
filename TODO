Short list
==========
- implement server

- Serialize behaviors
- Allow to remove any objects from the scene
- TextEditor
    - Scroll over page long codes or scroll movement logic to follow pointer
    - autocompletion.
- Full stack in stdout during exceptions
- MeshNode


Comfort
=======
- Max width for stdout (+wordwrap)
- 'E' code editor always visible
V 'E' code editor facing camera
- Errors facing camera
- Make "tracer" lines linking the code editor to the target object (may be harder than it sounds)
- Find a way to show several errors in different places
- Find why errors do not show up on class recreation
V Update texture and layout after keypress, please...
- Blink cursor -> C'est un peu dur, on ne peut avoir de blink cursor que sur un widget focus et visible. Il faudrait surement subclass QTextEdit et c'est chaud en python...
- Insert cell above

Architecture
============
- Share more code between TextLabelNode et TextEditMode
- Collpse CodeSnippet and CodeSnippetReceiver? Are they different?
- keybindings-> nav/tab -> on_key handlers in behaviors
    -> finish the cleanup
- onclick becomes a behavior only thing?
    -> Yes and all actions get a "click" coordinate
- Put the collision logic in a saner place
- Does it make sense to create a collider hierarchy?
- Clean up the order of the updates
- Switch to new pos/orient values after the scene update (why, again? (because I think there is
    some frame delay in some updates in child-parents mess))
- Debug transparency order
- Make position/orientation properties to help serialization
- Make constructors parameter-less and have an init() call, to help serialization
- Put the loading code somewhere else than in the main
- Standardiser les noms d'attributs dans les shaders!
- Should paint really use the self.program argument?
- manage focus a bit more automatically
- Add crosshairs under self.context.hud in View3D
- Should .scene really be a member of .context? Why not just View3D?
- Check if PytonFileEditornode and ObjectEditorNode and InstanciatedObject are not redundant
- Put grab/ungrab on camera node
- Remove .grabbed de PlayerContext and attach it to a camera behavior instead


Graphics Enhancements
=====================
- Add meshes
- Fullscreen mode
- shader for directional light
- shader with ambient
- better mesh structure with faces, normals, option for doing wireframe, etc...
- Redo the shadow of the crosshair
- Make a shader to make transparent text visible over white background
- Fix the light, either by making it good from all angles or making it a placeable object


UI
==
- Add HUD tooltips
- Find a better code highliter
- Debug console scrolling (allow clicks and check why the scrollbar renders weirdly)
- Add smarter indentation to the code view
- Add rlcompleter to TextEdit
- Add rlcompleter to  Console
- Transmit clicks and drag to Qt
- Put cursor on the location we clicked
- Find a good scrolling implementation for too long pages when snapped in view
- Altitude guides? (dashed line a la starcraft for flying units) or shadows
- allow grab of elements in Tab mode
- When a window is being edited, cheat with the Z-buffer to make it appear above other objects
    (switch it to HUD layer?)
- Remove formatting when copy-pasting from external sources


Debug
=====
- Handle the case where a TextLabel is empty
- Compute the correct collision point in Sphere-Ray collisions
- Can't move again after `ESC` on text
- Tab, leave window, come back on window -> pointer is gone
- Handle 'tab' correctly when in code editor window!
- Grab, snap -> object is not under cursor anymore, means grab can't release!
- Remove formatting when copypasting from outside
- Remove hud visor when 'tab' is pressed or code is focused
- Actually use the `dt` parameter in update functions, and use it in the DataViewer update

Features
========
- Object Explorer (to replace InstanciatedObject)? (wip)
- Parameters editor, to call member functions in the Object Explorer

Done
====
- Put imports into execution_context
- Reestablish the click behavior (lost it in the pybullet to ode transition)
- Have a shader for basic lighting object
- Have a shader for colored object
- Make code widgets adapt to the file size
- Put shaders in separate file that can be sanely highlighted
- Slerp interpolation
X Nettoyer Context d'ailleurs (Why? C'est pas trop mal...)
- Improve the switch between navigation and interaction
- context.scene.sphere -> c'est pas propre
- Don't have the cursor intersect with itself, that's stupids
- Behaviors with local scope
- Add cubes!
- Ability do de-tilt objects by 90° increments (kinda: snaps to closest 90° On Key_1)
- Prevent the grid from being grabbed
- slightly different Z for planes that can z-fight
- Add collisions to cubes
- Anti-aliasing?
- Show text file names
- Allow clicking even in TAB-mode, immobile with mouse cursor
- More visible pointer
- There is a seam on of the sides of the skybox
- Think of a cleaner way to display a HUD sceneroot (shader with no proj matrix at all maybe?)
- HUD elements that bypass rescaling ratio?
- UI logic
- copy-paste from outside
- Ability to add cells
- View3D:
    V remove self.context.abstract_input
    V remove self.key_map
    V make a self.key_pressed set
    V use self.context.mappings to move
    V use events instead of all the if event.key() ==
    V Add a way to save code in the save_scene function
V Change the way slots work in the GameObject
    V Just an arbitrary list of slots, auto split around function defs
    V Have a last empty slot
        V create a new one when the empty one is filled
        V remove one when two empty slots follow each other
V Error management
    V Try...except when running user code (update, render, init)
    V Errors displayed in game (HUD or child TextWidget)
        V Reset error messages on code update
V autosave when quitting
V Invoke Editor on 'E'
- Widget borders
V Handle editing of the first slot correctly
- import math -> not defined?
V New objects management
    V Add
    V Way to make game objects selectable even without collision boxes 'edit'
