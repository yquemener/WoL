MVC vs visualizer/editor
------------------------
- This project is a visualizer and an editor.
- It aims at visualizing a lot of different things:
    1. files and folders
    2. a project hierarchy
    3. a live runtime state of a program
    4. system metrics
- I especially consider 3. to be the main goal, with 1. being a necessary intermediate step




Networking
----------
Simple protocol
    Knockknock: "Hi! I would like to see your scene" (placeholder for auth)
    list: "Show me the objects I can subscribe to"
    subscribe [list]: "Send me initial states and update on all of these please"
    sendstate [list]: "Send me initial states (again) on all of these per favor"
    state <id> <state>: "Here is the state of obj <id>"
    pose <id> <pos/orient/scale>: "Here is the pose of obj <id>"

Root
|
+-Remote
|   +--RemoteRoot1
|   |   +--RemoteCamera1
|   |   +--RemoteNode1
|   +--RemoteRoot2
|       +--RemoteCamera2
+-Local
    +--LocalCamera
    +--LocalNodeTree

- Should info between user1 and user2 be relayed by the server or directly exchanged between clients?
    - Making it a server thing would allow discussing with clients without TURN
    - Yeah, let's make it a pure client/server there.
    - We should be able to push info to the server then
- Security model:
    - Users are considered to trust each other to work on the same code and execute it
    - Only users choose which piece of code they are going to run at a given time
    - Code is run locally. The results of the code running can be seen remotely.

GUI
---



3D Objects interactions
-----------------------
- The user interacts with objects by sending them actions. E.g. 'activate', 'edit', 'open'.
- There is a mapping between key/clicks events and actions
    - Several actions can be attributed to the same key
    - A default mapping is provided
- Behaviors maintain a mapping between actions and handlers


HUD
---
A hud describes the current object type and the possible actions to it