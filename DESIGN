MVC vs visualizer/editor
------------------------
- This project is a visualizer and an editor.
- It aims at visualizing a lot of different things:
    1. files and folders
    2. a project hierarchy
    3. a live runtime state of a program
    4. system metrics
- I especially consider 3. to be the main goal, with 1. being a necessary intermediate step



User story
----------
We collaborate on a git tree.
I have local modifications I want to show another person
I want to show the result of the execution
Together we change the file content until we are happy
We end up doing a git commit


Networking
----------
Keep it simple:
We connect to a server.

- Submit objects to synchronization
- Receive an id for the object
- Do changes locally
- Push them
- Receive them

- Could it simply be a Behavior?


Simple protocol

client -> Server:
- Knockknock: "Hi! I would like to see your scene" (placeholder for auth)
- sendall: "Send me initial states of the objects in the scene"
- sendmenewid: "Create a new object and send my its ID"
Server <- Client
- newobjid <id>
both:
- state <id> <state>: "Here is the full state of obj <id>"
- pose <id> <pos/orient/scale>: "Here is the pose of obj <id>"
- update <id> <field> <value>: "Update field's value on obj <id>"

Persistence
- Is the state saved on the server?
- On the clients?

I like the idea of servers being empty "rooms" you populate with states and that you can also manipulate locally.

Root
|
+-Remote
|   +--RemoteRoot1
|   |   +--RemoteCamera1
|   |   +--RemoteNode1
|   +--RemoteRoot2
|       +--RemoteCamera2
+-Local
    +--LocalCamera
    +--LocalNodeTree

- Should info between user1 and user2 be relayed by the server or directly exchanged between clients?
    - Making it a server thing would allow discussing with clients without TURN
    - Yeah, let's make it a pure client/server there.
    - We should be able to push info to the server then
- Security model:
    - Users are considered to trust each other to work on the same code and execute it
    - Only users choose which piece of code they are going to run at a given time
    - Code is run locally. The results of the code running can be seen remotely.

GUI
---



3D Objects interactions
-----------------------
- The user interacts with objects by sending them actions. E.g. 'activate', 'edit', 'open'.
- There is a mapping between key/clicks events and actions
    - Several actions can be attributed to the same key
    - A default mapping is provided
- Behaviors maintain a mapping between actions and handlers


HUD
---
A hud describes the current object type and the possible actions to it